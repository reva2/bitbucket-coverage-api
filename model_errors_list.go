/*
 * Bitbucket Server Code Coverage plugin API
 *
 * Bitbucket Server Code Coverage plugin API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coverage

import (
	"encoding/json"
)

// ErrorsList struct for ErrorsList
type ErrorsList struct {
	Errors []Error `json:"errors"`
}

// NewErrorsList instantiates a new ErrorsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorsList(errors []Error) *ErrorsList {
	this := ErrorsList{}
	this.Errors = errors
	return &this
}

// NewErrorsListWithDefaults instantiates a new ErrorsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorsListWithDefaults() *ErrorsList {
	this := ErrorsList{}
	return &this
}

// GetErrors returns the Errors field value
func (o *ErrorsList) GetErrors() []Error {
	if o == nil {
		var ret []Error
		return ret
	}

	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value
// and a boolean to check if the value has been set.
func (o *ErrorsList) GetErrorsOk() (*[]Error, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Errors, true
}

// SetErrors sets field value
func (o *ErrorsList) SetErrors(v []Error) {
	o.Errors = v
}

func (o ErrorsList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableErrorsList struct {
	value *ErrorsList
	isSet bool
}

func (v NullableErrorsList) Get() *ErrorsList {
	return v.value
}

func (v *NullableErrorsList) Set(val *ErrorsList) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorsList) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorsList(val *ErrorsList) *NullableErrorsList {
	return &NullableErrorsList{value: val, isSet: true}
}

func (v NullableErrorsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
