/*
 * Bitbucket Server Code Coverage plugin API
 *
 * Bitbucket Server Code Coverage plugin API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package coverage

import (
	"encoding/json"
)

// CommitCoverage Commit code coverage data
type CommitCoverage struct {
	// Code coverage data for files included in commit
	Files []FileCoverage `json:"files"`
}

// NewCommitCoverage instantiates a new CommitCoverage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitCoverage(files []FileCoverage) *CommitCoverage {
	this := CommitCoverage{}
	this.Files = files
	return &this
}

// NewCommitCoverageWithDefaults instantiates a new CommitCoverage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitCoverageWithDefaults() *CommitCoverage {
	this := CommitCoverage{}
	return &this
}

// GetFiles returns the Files field value
func (o *CommitCoverage) GetFiles() []FileCoverage {
	if o == nil {
		var ret []FileCoverage
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *CommitCoverage) GetFilesOk() (*[]FileCoverage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Files, true
}

// SetFiles sets field value
func (o *CommitCoverage) SetFiles(v []FileCoverage) {
	o.Files = v
}

func (o CommitCoverage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["files"] = o.Files
	}
	return json.Marshal(toSerialize)
}

type NullableCommitCoverage struct {
	value *CommitCoverage
	isSet bool
}

func (v NullableCommitCoverage) Get() *CommitCoverage {
	return v.value
}

func (v *NullableCommitCoverage) Set(val *CommitCoverage) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitCoverage) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitCoverage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitCoverage(val *CommitCoverage) *NullableCommitCoverage {
	return &NullableCommitCoverage{value: val, isSet: true}
}

func (v NullableCommitCoverage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitCoverage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
